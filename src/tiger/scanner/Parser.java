
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 08 08:56:10 CST 2013
//----------------------------------------------------

package tiger.scanner;

import tiger.errors.*;
import tiger.ast.*;
import tiger.symbol.*;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Sun Dec 08 08:56:10 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\006\000\002\003\004\000" +
    "\002\003\005\000\002\003\005\000\002\003\006\000\002" +
    "\003\010\000\002\003\006\000\002\003\010\000\002\003" +
    "\006\000\002\003\012\000\002\003\003\000\002\003\006" +
    "\000\002\003\007\000\002\004\003\000\002\004\005\000" +
    "\002\004\006\000\002\006\003\000\002\006\005\000\002" +
    "\005\003\000\002\005\005\000\002\007\005\000\002\007" +
    "\007\000\002\010\003\000\002\010\004\000\002\011\006" +
    "\000\002\011\010\000\002\011\010\000\002\011\011\000" +
    "\002\011\012\000\002\011\013\000\002\011\006\000\002" +
    "\012\003\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\013\005\000\002\013\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\030\004\013\005\011\006\005\012\016\022" +
    "\004\037\012\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\030\004\013\005\011\006\005\012\016\022" +
    "\004\037\012\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\070\002\uffff\007\uffff\011\uffff\013\uffff\015" +
    "\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff" +
    "\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\040\uffff\041\uffff\044\uffff\045\uffff\047\uffff\050\uffff" +
    "\054\uffff\055\uffff\056\uffff\001\002\000\030\004\013\005" +
    "\011\006\005\012\016\022\004\037\012\042\006\043\007" +
    "\046\015\052\020\053\010\001\002\000\004\004\204\001" +
    "\002\000\070\002\ufffe\007\ufffe\011\ufffe\013\ufffe\015\ufffe" +
    "\017\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\040\ufffe\041\ufffe\044\ufffe\045\ufffe\047\ufffe\050\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\001\002\000\070\002\000\007\000" +
    "\011\000\013\000\015\000\017\000\021\000\022\000\023" +
    "\000\024\000\025\000\026\000\027\000\030\000\031\000" +
    "\032\000\033\000\034\000\040\000\041\000\044\000\045" +
    "\000\047\000\050\000\054\000\055\000\056\000\001\002" +
    "\000\030\004\013\005\011\006\005\012\016\022\004\037" +
    "\012\042\006\043\007\046\015\052\020\053\010\001\002" +
    "\000\102\002\uffe0\007\uffe0\011\uffe0\012\156\013\uffe0\014" +
    "\uffe0\015\uffe0\016\155\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0" +
    "\044\uffe0\045\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\001\002\000\034\002\154\021\032\022\025\023\036" +
    "\024\027\025\033\026\031\027\037\030\034\031\035\032" +
    "\030\033\026\034\040\001\002\000\010\054\072\055\070" +
    "\056\073\001\002\000\032\004\013\005\011\006\005\012" +
    "\016\013\063\022\004\037\012\042\006\043\007\046\015" +
    "\052\020\053\010\001\002\000\076\002\ufffd\007\ufffd\011" +
    "\ufffd\013\ufffd\014\021\015\ufffd\017\ufffd\020\022\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\023\040\ufffd" +
    "\041\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\001\002\000\070\002\uffe3\007\uffe3\011\uffe3" +
    "\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3\047" +
    "\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\030" +
    "\004\013\005\011\006\005\012\016\022\004\037\012\042" +
    "\006\043\007\046\015\052\020\053\010\001\002\000\004" +
    "\004\055\001\002\000\030\004\013\005\011\006\005\012" +
    "\016\022\004\037\012\042\006\043\007\046\015\052\020" +
    "\053\010\001\002\000\070\002\uffef\007\uffef\011\uffef\013" +
    "\uffef\015\uffef\017\uffef\021\032\022\025\023\036\024\027" +
    "\025\033\026\031\027\037\030\034\031\035\032\030\033" +
    "\026\034\040\040\uffef\041\uffef\044\uffef\045\uffef\047\uffef" +
    "\050\uffef\054\uffef\055\uffef\056\uffef\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\070\002" +
    "\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0\017\ufff0\021\032" +
    "\022\025\023\036\024\027\025\033\026\031\027\037\030" +
    "\034\031\035\032\030\033\026\034\040\040\ufff0\041\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\001\002\000\054\002\ufff5\007\ufff5\011\ufff5\013\ufff5" +
    "\015\ufff5\017\ufff5\021\032\022\025\023\036\024\027\033" +
    "\ufff5\034\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\047\ufff5" +
    "\050\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\070\002" +
    "\ufff9\007\ufff9\011\ufff9\013\ufff9\015\ufff9\017\ufff9\021\ufff9" +
    "\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\040\ufff9\041\ufff9" +
    "\044\ufff9\045\ufff9\047\ufff9\050\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\001\002\000\054\002\ufff3\007\ufff3\011\ufff3\013\ufff3" +
    "\015\ufff3\017\ufff3\021\032\022\025\023\036\024\027\033" +
    "\ufff3\034\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3" +
    "\050\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\054\002" +
    "\ufff4\007\ufff4\011\ufff4\013\ufff4\015\ufff4\017\ufff4\021\032" +
    "\022\025\023\036\024\027\033\ufff4\034\ufff4\040\ufff4\041" +
    "\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\001\002\000\054\002\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\015\ufff7\017\ufff7\021\032\022\025\023\036\024\027" +
    "\033\ufff7\034\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047" +
    "\ufff7\050\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002\000\070" +
    "\002\ufffb\007\ufffb\011\ufffb\013\ufffb\015\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\036\024\027\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\040\ufffb\041" +
    "\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\001\002\000\054\002\ufff6\007\ufff6\011\ufff6\013" +
    "\ufff6\015\ufff6\017\ufff6\021\032\022\025\023\036\024\027" +
    "\033\ufff6\034\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\047" +
    "\ufff6\050\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000\054" +
    "\002\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2\017\ufff2\021" +
    "\032\022\025\023\036\024\027\033\ufff2\034\ufff2\040\ufff2" +
    "\041\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\001\002\000\070\002\ufff8\007\ufff8\011\ufff8" +
    "\013\ufff8\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\047" +
    "\ufff8\050\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000\070" +
    "\002\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1\017\ufff1\021" +
    "\032\022\025\023\036\024\027\025\033\026\031\027\037" +
    "\030\034\031\035\032\030\033\026\034\ufff1\040\ufff1\041" +
    "\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\001\002\000\070\002\ufffa\007\ufffa\011\ufffa\013" +
    "\ufffa\015\ufffa\017\ufffa\021\ufffa\022\ufffa\023\036\024\027" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\047\ufffa" +
    "\050\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002\000\076\002" +
    "\uffdf\007\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf\047\uffdf\050" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002\000\034\015\057" +
    "\021\032\022\025\023\036\024\027\025\033\026\031\027" +
    "\037\030\034\031\035\032\030\033\026\034\040\001\002" +
    "\000\100\002\uffde\007\uffde\011\uffde\013\uffde\014\uffde\015" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\040\uffde\041\uffde\044\uffde\045\uffde" +
    "\047\uffde\050\uffde\051\060\054\uffde\055\uffde\056\uffde\001" +
    "\002\000\030\004\013\005\011\006\005\012\016\022\004" +
    "\037\012\042\006\043\007\046\015\052\020\053\010\001" +
    "\002\000\070\002\uffe8\007\uffe8\011\uffe8\013\uffe8\015\uffe8" +
    "\017\uffe8\021\032\022\025\023\036\024\027\025\033\026" +
    "\031\027\037\030\034\031\035\032\030\033\026\034\040" +
    "\040\uffe8\041\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\001\002\000\006\011\066\013\065" +
    "\001\002\000\070\002\uffec\007\uffec\011\uffec\013\uffec\015" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\040\uffec\041\uffec\044\uffec\045\uffec\047\uffec\050\uffec" +
    "\054\uffec\055\uffec\056\uffec\001\002\000\040\011\uffdd\013" +
    "\uffdd\021\032\022\025\023\036\024\027\025\033\026\031" +
    "\027\037\030\034\031\035\032\030\033\026\034\040\050" +
    "\uffdd\001\002\000\070\002\uffeb\007\uffeb\011\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\030\004\013" +
    "\005\011\006\005\012\016\022\004\037\012\042\006\043" +
    "\007\046\015\052\020\053\010\001\002\000\040\011\uffdc" +
    "\013\uffdc\021\032\022\025\023\036\024\027\025\033\026" +
    "\031\027\037\030\034\031\035\032\030\033\026\034\040" +
    "\050\uffdc\001\002\000\004\004\145\001\002\000\012\047" +
    "\140\054\072\055\070\056\073\001\002\000\004\004\117" +
    "\001\002\000\004\004\075\001\002\000\012\047\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\001\002\000\004\025\076\001\002" +
    "\000\010\004\077\016\100\036\102\001\002\000\012\047" +
    "\uffce\054\uffce\055\uffce\056\uffce\001\002\000\006\004\105" +
    "\017\106\001\002\000\012\047\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\001\002\000\004\051\103\001\002\000\004\004\104" +
    "\001\002\000\012\047\uffcb\054\uffcb\055\uffcb\056\uffcb\001" +
    "\002\000\004\010\115\001\002\000\012\047\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\001\002\000\006\007\110\017\111\001" +
    "\002\000\004\004\112\001\002\000\012\047\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\001\002\000\004\010\113\001\002\000" +
    "\004\004\114\001\002\000\010\007\uffc9\013\uffc9\017\uffc9" +
    "\001\002\000\004\004\116\001\002\000\010\007\uffca\013" +
    "\uffca\017\uffca\001\002\000\004\012\120\001\002\000\006" +
    "\004\105\013\121\001\002\000\006\010\133\025\132\001" +
    "\002\000\006\007\110\013\123\001\002\000\006\010\125" +
    "\025\124\001\002\000\030\004\013\005\011\006\005\012" +
    "\016\022\004\037\012\042\006\043\007\046\015\052\020" +
    "\053\010\001\002\000\004\004\126\001\002\000\004\025" +
    "\127\001\002\000\030\004\013\005\011\006\005\012\016" +
    "\022\004\037\012\042\006\043\007\046\015\052\020\053" +
    "\010\001\002\000\042\021\032\022\025\023\036\024\027" +
    "\025\033\026\031\027\037\030\034\031\035\032\030\033" +
    "\026\034\040\047\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002" +
    "\000\042\021\032\022\025\023\036\024\027\025\033\026" +
    "\031\027\037\030\034\031\035\032\030\033\026\034\040" +
    "\047\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\004\004" +
    "\134\001\002\000\004\025\135\001\002\000\030\004\013" +
    "\005\011\006\005\012\016\022\004\037\012\042\006\043" +
    "\007\046\015\052\020\053\010\001\002\000\042\021\032" +
    "\022\025\023\036\024\027\025\033\026\031\027\037\030" +
    "\034\031\035\032\030\033\026\034\040\047\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\001\002\000\042\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\047\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\001\002\000\032\004\013\005\011\006\005\012\016" +
    "\022\004\037\012\042\006\043\007\046\015\050\143\052" +
    "\020\053\010\001\002\000\012\047\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\006\011\066\050\144\001\002\000" +
    "\070\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\001\002\000\070\002\uffe1\007\uffe1\011\uffe1" +
    "\013\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047" +
    "\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\006" +
    "\010\146\035\147\001\002\000\004\004\151\001\002\000" +
    "\030\004\013\005\011\006\005\012\016\022\004\037\012" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\042\021\032\022\025\023\036\024\027\025\033\026\031" +
    "\027\037\030\034\031\035\032\030\033\026\034\040\047" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\001\002\000\004\035\152" +
    "\001\002\000\030\004\013\005\011\006\005\012\016\022" +
    "\004\037\012\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\042\021\032\022\025\023\036\024\027\025" +
    "\033\026\031\027\037\030\034\031\035\032\030\033\026" +
    "\034\040\047\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\004\002\001\001\002\000\006\004\165\017\166\001\002" +
    "\000\032\004\013\005\011\006\005\012\016\013\160\022" +
    "\004\037\012\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\006\007\162\013\163\001\002\000\070\002" +
    "\uffee\007\uffee\011\uffee\013\uffee\015\uffee\017\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\040\uffee\041\uffee" +
    "\044\uffee\045\uffee\047\uffee\050\uffee\054\uffee\055\uffee\056" +
    "\uffee\001\002\000\036\007\uffdb\013\uffdb\021\032\022\025" +
    "\023\036\024\027\025\033\026\031\027\037\030\034\031" +
    "\035\032\030\033\026\034\040\001\002\000\030\004\013" +
    "\005\011\006\005\012\016\022\004\037\012\042\006\043" +
    "\007\046\015\052\020\053\010\001\002\000\070\002\uffed" +
    "\007\uffed\011\uffed\013\uffed\015\uffed\017\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\040\uffed\041\uffed\044" +
    "\uffed\045\uffed\047\uffed\050\uffed\054\uffed\055\uffed\056\uffed" +
    "\001\002\000\036\007\uffda\013\uffda\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\001\002\000\004\025\175\001" +
    "\002\000\070\002\uffea\007\uffea\011\uffea\013\uffea\015\uffea" +
    "\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\040\uffea\041\uffea\044\uffea\045\uffea\047\uffea\050\uffea\054" +
    "\uffea\055\uffea\056\uffea\001\002\000\006\007\170\017\171" +
    "\001\002\000\004\004\172\001\002\000\070\002\uffe9\007" +
    "\uffe9\011\uffe9\013\uffe9\015\uffe9\017\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\040\uffe9\041\uffe9\044\uffe9" +
    "\045\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9\001" +
    "\002\000\004\025\173\001\002\000\030\004\013\005\011" +
    "\006\005\012\016\022\004\037\012\042\006\043\007\046" +
    "\015\052\020\053\010\001\002\000\036\007\uffd8\017\uffd8" +
    "\021\032\022\025\023\036\024\027\025\033\026\031\027" +
    "\037\030\034\031\035\032\030\033\026\034\040\001\002" +
    "\000\030\004\013\005\011\006\005\012\016\022\004\037" +
    "\012\042\006\043\007\046\015\052\020\053\010\001\002" +
    "\000\036\007\uffd9\017\uffd9\021\032\022\025\023\036\024" +
    "\027\025\033\026\031\027\037\030\034\031\035\032\030" +
    "\033\026\034\040\001\002\000\034\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\040\200\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\070\002" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\032" +
    "\022\025\023\036\024\027\025\033\026\031\027\037\030" +
    "\034\031\035\032\030\033\026\034\040\040\uffe7\041\202" +
    "\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\001\002\000\030\004\013\005\011\006\005\012\016" +
    "\022\004\037\012\042\006\043\007\046\015\052\020\053" +
    "\010\001\002\000\070\002\uffe6\007\uffe6\011\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\021\032\022\025\023\036\024\027\025" +
    "\033\026\031\027\037\030\034\031\035\032\030\033\026" +
    "\034\040\040\uffe6\041\uffe6\044\uffe6\045\uffe6\047\uffe6\050" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\004\035\205" +
    "\001\002\000\030\004\013\005\011\006\005\012\016\022" +
    "\004\037\012\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\034\021\032\022\025\023\036\024\027\025" +
    "\033\026\031\027\037\030\034\031\035\032\030\033\026" +
    "\034\040\044\207\001\002\000\030\004\013\005\011\006" +
    "\005\012\016\022\004\037\012\042\006\043\007\046\015" +
    "\052\020\053\010\001\002\000\034\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\045\211\001\002\000\030\004" +
    "\013\005\011\006\005\012\016\022\004\037\012\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\070\002" +
    "\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4\021\032" +
    "\022\025\023\036\024\027\025\033\026\031\027\037\030" +
    "\034\031\035\032\030\033\026\034\040\040\uffe4\041\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\001\002\000\034\021\032\022\025\023\036\024\027" +
    "\025\033\026\031\027\037\030\034\031\035\032\030\033" +
    "\026\034\040\045\214\001\002\000\030\004\013\005\011" +
    "\006\005\012\016\022\004\037\012\042\006\043\007\046" +
    "\015\052\020\053\010\001\002\000\070\002\uffe5\007\uffe5" +
    "\011\uffe5\013\uffe5\015\uffe5\017\uffe5\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\040\uffe5\041\uffe5\044\uffe5\045" +
    "\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002" +
    "\000\070\002\ufffc\007\ufffc\011\ufffc\013\ufffc\015\ufffc\017" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\040" +
    "\ufffc\041\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\003\013\004\016\001\001\000\006\003" +
    "\215\004\016\001\001\000\002\001\001\000\006\003\212" +
    "\004\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\176\004\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\070\011\073\001" +
    "\001\000\010\003\063\004\016\006\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\055\004\016\001" +
    "\001\000\002\001\001\000\006\003\023\004\016\001\001" +
    "\000\002\001\001\000\006\003\053\004\016\001\001\000" +
    "\006\003\052\004\016\001\001\000\006\003\051\004\016" +
    "\001\001\000\006\003\050\004\016\001\001\000\006\003" +
    "\047\004\016\001\001\000\006\003\046\004\016\001\001" +
    "\000\006\003\045\004\016\001\001\000\006\003\044\004" +
    "\016\001\001\000\006\003\043\004\016\001\001\000\006" +
    "\003\042\004\016\001\001\000\006\003\041\004\016\001" +
    "\001\000\006\003\040\004\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\060\004\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\066\004\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\100\001\001\000\002" +
    "\001\001\000\004\013\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\130\004" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\127\004\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\136\004\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\135\004\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\063\004\016" +
    "\006\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\147\004\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\152\004\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\166\001" +
    "\001\000\010\003\160\004\016\005\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\163\004\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\173\004\016\001\001\000\002\001\001\000\006\003" +
    "\175\004\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\200\004\016\001\001\000\002\001\001\000" +
    "\006\003\202\004\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\205\004\016\001\001\000\002\001" +
    "\001\000\006\003\207\004\016\001\001\000\002\001\001" +
    "\000\006\003\211\004\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\214\004\016\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	ErrorList e_list;
	public void add_error(String m,int l,int c){
    	if(e_list==null)
    		throw new RuntimeException(m+" at "+l+","+c);
    	else
    		e_list.add_error(m,l,c,"parser");
    }
    
    
    
    public Parser(java_cup.runtime.Scanner s,ErrorList e){
    	this(s);
    	e_list = e;
    }
    public Parser(java.io.InputStream in,ErrorList e){
    	this(new Lexer(in,e));
    	e_list = e;
    }
    
    public void report_fatal_error(String message, Object info)throws java.lang.Exception
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();
      /* use the normal error message reporting to put out the message */
      report_error(message, info);
      /* throw an exception */
      throw new Exception("Can't recover from previous error(s)");
    }
    
    public void report_error(String m, Object info)
    {
    	if(e_list==null)
    		System.err.println(m+" at "+((Symbol)info).left+","+((Symbol)info).right);
    	else
    		e_list.add_error(m,((Symbol)info).left,((Symbol)info).right,"parser");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	private Zsymbol get_sym(TokenInfo x){
    	return Zsymbol.symbol((String)(x.info));
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tyfield_list ::= tyfield_list COMMA ID COLON ID 
            {
              Listty_field RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Listty_field l = (Listty_field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo tid = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Listty_field(new Field_ty(i.line,i.column,get_sym(i),get_sym(tid)),l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*tyfield_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tyfield_list ::= ID COLON ID 
            {
              Listty_field RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo tid = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Listty_field(new Field_ty(i.line,i.column,get_sym(i),get_sym(tid))); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*tyfield_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo a = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Ty_array(a.line,a.column,get_sym(i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= LBRACE tyfield_list RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo l = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Listty_field li = (Listty_field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Ty_struct(l.line,l.column,li); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= LBRACE RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo l = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Ty_struct(l.line,l.column,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= ID 
            {
              Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Ty_id(i.line,i.column,get_sym(i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec ::= TYPE ID EQ type 
            {
              Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_type(t.line,t.column,get_sym(i),ty); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dec ::= FUNCTION ID LPAREN tyfield_list RPAREN COLON ID EQ expr 
            {
              Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TokenInfo f = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Listty_field l = (Listty_field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo tid = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_fun(f.line,f.column,get_sym(i),e,l,get_sym(tid)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec ::= FUNCTION ID LPAREN RPAREN COLON ID EQ expr 
            {
              Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TokenInfo f = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo tid = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_fun(f.line,f.column,get_sym(i),e,null,get_sym(tid)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec ::= FUNCTION ID LPAREN tyfield_list RPAREN EQ expr 
            {
              Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TokenInfo f = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Listty_field l = (Listty_field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_fun(f.line,f.column,get_sym(i),e,l,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= FUNCTION ID LPAREN RPAREN EQ expr 
            {
              Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenInfo f = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_fun(f.line,f.column,get_sym(i),e,null,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec ::= VAR ID COLON ID ASSIGN expr 
            {
              Dec RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenInfo var = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo tid = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_var(var.line,var.column,get_sym(i),e,get_sym(tid)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec ::= VAR ID ASSIGN expr 
            {
              Dec RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo var = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Dec_var(var.line,var.column,get_sym(i),e,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*dec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec_list ::= dec_list dec 
            {
              List_dec RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List_dec l = (List_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new List_dec(d,l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*dec_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_list ::= dec 
            {
              List_dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new List_dec(d); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*dec_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_list ::= field_list COMMA ID EQ expr 
            {
              List_field RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List_field fl = (List_field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new List_field(new Field(i.line,i.column,get_sym(i),e),fl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*field_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= ID EQ expr 
            {
              List_field RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new List_field(new Field(i.line,i.column,get_sym(i),e)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*field_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_list ::= expr_list COMMA expr 
            {
              List_expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List_expr l = (List_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new List_expr(e,l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_list ::= expr 
            {
              List_expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new List_expr(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_seq ::= expr_seq SEMICOLON expr 
            {
              Listseq_expr RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Listseq_expr s = (Listseq_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Listseq_expr(e,s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_seq ::= expr 
            {
              Listseq_expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Listseq_expr(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lvalue ::= lvalue LBRACK expr RBRACK 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Var_index(v.line,v.column,v,e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Var_field(v.line,v.column,v,get_sym(i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lvalue ::= ID 
            {
              Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Var_id(i.line,i.column,get_sym(i)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= LET dec_list IN expr_seq END 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List_dec l = (List_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Listseq_expr s = (Listseq_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Expr_let(i.line,i.column,l,s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LET dec_list IN END 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List_dec l = (List_dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Expr_let(i.line,i.column,l,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= BREAK 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_break(i.line,i.column); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_for(i.line,i.column,get_sym(id),e1,e2,e3); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= WHILE expr DO expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_while(i.line,i.column,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IF expr THEN expr ELSE expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_ifelse(i.line,i.column,e1,e2,e3); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IF expr THEN expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_ifthen(i.line,i.column,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= lvalue LBRACK expr RBRACK OF expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Var i = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
	   						if(!(i instanceof Var_id)){	//error
	   							this.parser.add_error("Syntax_error",i.line,i.column);
	   							throw new Exception("Can't recover from previous error(s)");
	   						}
	   						RESULT = new Expr_array(i.line,i.column,((Var_id)i).sym,e,e2); 
	   					
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ID LBRACE field_list RBRACE 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List_field l = (List_field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Expr_struct(i.line,i.column,get_sym(i),l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= ID LBRACE RBRACE 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Expr_struct(i.line,i.column,get_sym(i),null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LPAREN expr_seq RPAREN 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Listseq_expr s = (Listseq_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Expr_seq(t.line,t.column,s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LPAREN RPAREN 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Expr_seq(t.line,t.column,null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= ID LPAREN expr_list RPAREN 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List_expr l = (List_expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Expr_app(i.line,i.column,get_sym(i),l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= ID LPAREN RPAREN 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TokenInfo i = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Expr_app(i.line,i.column,get_sym(i),null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= lvalue ASSIGN expr 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_assign(t.line,t.column,v,e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr OR expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.OR,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr AND expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.AND,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr GE expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.GE,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr GT expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.GT,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LE expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.LE,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr LT expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.LT,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr NEQ expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.NE,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr EQ expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.EQ,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.DIV,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr TIMES expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.MUL,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MINUS expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.MINUS,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_op(t.line,t.column,Expr_op.PLUS,e1,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= MINUS expr 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_neg(t.line,t.column,e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= lvalue 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_var(v.line,v.column,v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NIL 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_nil(t.line,t.column); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= INT 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_int(t.line,t.column,(Integer)t.info); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= STRING 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TokenInfo t = (TokenInfo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Expr_str(t.line,t.column,(String)t.info); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr start_val = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

